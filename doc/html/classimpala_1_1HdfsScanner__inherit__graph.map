<map id="impala::HdfsScanner" name="impala::HdfsScanner">
<area shape="rect" id="node2" href="$classimpala_1_1BaseSequenceScanner.html" title="{impala::BaseSequenceScanner\n|# header_\l# only_parsing_header_\l# SYNC_HASH_SIZE\l# HEADER_SIZE\l# SYNC_MARKER\l&#45; finished_\l&#45; block_start_\l&#45; total_block_size_\l&#45; num_syncs_\l&#45; bytes_skipped_counter_\l|+ Prepare()\l+ Close()\l+ ProcessSplit()\l+ ~BaseSequenceScanner()\l+ IssueInitialRanges()\l# AllocateFileHeader()\l# ReadFileHeader()\l# ProcessRange()\l# file_format()\l# BaseSequenceScanner()\l# ReadSync()\l# SkipToSync()\l# finished()\l&#45; ReadPastSize()\l&#45; FindSyncBlock()\l&#45; CloseFileRanges()\l}" alt="" coords="245,645,448,1075"/>
<area shape="rect" id="node6" href="$classimpala_1_1HdfsParquetScanner.html" title="{impala::HdfsParquetScanner\n|&#45; column_readers_\l&#45; file_metadata_\l&#45; file_version_\l&#45; schema_\l&#45; metadata_range_\l&#45; parse_status_\l&#45; dictionary_pool_\l&#45; assemble_rows_timer_\l&#45; num_cols_counter_\l&#45; FOOTER_SIZE\l|+ HdfsParquetScanner()\l+ ~HdfsParquetScanner()\l+ Prepare()\l+ Close()\l+ ProcessSplit()\l+ IssueInitialRanges()\l&#45; AssembleRows()\l&#45; ProcessFooter()\l&#45; CreateColumnReaders()\l&#45; CreateReader()\l&#45; InitColumns()\l&#45; ValidateFileMetadata()\l&#45; ValidateColumn()\l&#45; InitNewRange()\l&#45; CreateSchemaTree()\l&#45; CreateSchemaTree()\l}" alt="" coords="473,645,663,1075"/>
<area shape="rect" id="node7" href="$classimpala_1_1HdfsTextScanner.html" title="{impala::HdfsTextScanner\n|+ LZO_INDEX_SUFFIX\l+ LLVM_CLASS_NAME\l# byte_buffer_ptr_\l# byte_buffer_end_\l# byte_buffer_read_size_\l# only_parsing_header_\l&#45; boundary_pool_\l&#45; boundary_row_\l&#45; boundary_column_\l&#45; slot_idx_\l&#45; delimited_text_parser_\l&#45; field_locations_\l&#45; row_end_locations_\l&#45; batch_start_ptr_\l&#45; error_in_row_\l&#45; partial_tuple_\l&#45; partial_tuple_empty_\l&#45; parse_delimiter_timer_\l&#45; NEXT_BLOCK_READ_SIZE\l|+ HdfsTextScanner()\l+ ~HdfsTextScanner()\l+ Prepare()\l+ ProcessSplit()\l+ Close()\l+ IssueInitialRanges()\l+ Codegen()\l# ResetScanner()\l&#45; InitNewRange()\l&#45; FindFirstTuple()\l&#45; ProcessRange()\l&#45; FinishScanRange()\l&#45; FillByteBuffer()\l&#45; FillByteBufferCompressedFile()\l&#45; FillByteBufferGzip()\l&#45; CopyBoundaryField()\l&#45; WriteFields()\l&#45; WritePartialTuple()\l&#45; LogRowParseError()\l}" alt="" coords="687,557,899,1163"/>
<area shape="rect" id="node3" href="$classimpala_1_1HdfsAvroScanner.html" title="{impala::HdfsAvroScanner\n|+ AVRO_VERSION_HEADER\l&#45; avro_header_\l&#45; codegend_decode_avro\l_data_\l&#45; AVRO_SCHEMA_KEY\l&#45; AVRO_CODEC_KEY\l&#45; AVRO_NULL_CODEC\l&#45; AVRO_SNAPPY_CODEC\l&#45; AVRO_DEFLATE_CODEC\l&#45; LLVM_CLASS_NAME\l|+ HdfsAvroScanner()\l+ Codegen()\l# AllocateFileHeader()\l# ReadFileHeader()\l# InitNewRange()\l# ProcessRange()\l# file_format()\l&#45; ParseMetadata()\l&#45; ResolveSchemas()\l&#45; VerifyTypesMatch()\l&#45; DecodeAvroData()\l&#45; MaterializeTuple()\l&#45; ReadAvroBoolean()\l&#45; ReadAvroInt32()\l&#45; ReadAvroInt64()\l&#45; ReadAvroFloat()\l&#45; ReadAvroDouble()\l&#45; ReadAvroVarchar()\l&#45; ReadAvroChar()\l&#45; ReadAvroString()\l&#45; ReadAvroDecimal()\l&#45; ReadUnionType()\l&#45; ConvertSchema()\l&#45; CodegenDecodeAvroData()\l&#45; CodegenMaterializeTuple()\l}" alt="" coords="5,1211,208,1773"/>
<area shape="rect" id="node4" href="$classimpala_1_1HdfsRCFileScanner.html" title="A scanner for reading RCFiles into tuples. " alt="" coords="233,1226,460,1758"/>
<area shape="rect" id="node5" href="$classimpala_1_1HdfsSequenceScanner.html" title="{impala::HdfsSequenceScanner\n|+ SEQFILE_VERSION_HEADER\l&#45; delimited_text_parser_\l&#45; field_locations_\l&#45; record_locations_\l&#45; current_block_length_\l&#45; current_key_length_\l&#45; unparsed_data_buffer_\l&#45; num_buffered_records\l_in_compressed_block_\l&#45; next_record_in_compressed\l_block_\l&#45; MAX_BLOCK_SIZE\l&#45; SEQFILE_VALUE_CLASS_NAME\l|+ HdfsSequenceScanner()\l+ ~HdfsSequenceScanner()\l+ Prepare()\l+ Codegen()\l# AllocateFileHeader()\l# ReadFileHeader()\l# InitNewRange()\l# ProcessRange()\l# file_format()\l&#45; ReadBlockHeader()\l&#45; ProcessBlockCompressedScan\lRange()\l&#45; ReadCompressedBlock()\l&#45; ProcessDecompressedBlock()\l&#45; GetRecord()\l&#45; LogRowParseError()\l}" alt="" coords="484,1255,717,1729"/>
</map>
